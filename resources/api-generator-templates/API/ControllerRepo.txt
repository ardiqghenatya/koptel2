<?php namespace $NAMESPACE$;

use App\Http\Requests;
use Mitul\Controller\AppBaseController;
use Mitul\Generator\Utils\ResponseManager;
use $MODEL_NAMESPACE$;
use Illuminate\Http\Request;
use $REPO_NAMESPACE$\$MODEL_NAME$Repository;
use Response;
use Schema;

class $MODEL_NAME$APIController extends AppBaseController
{

	/** @var  $MODEL_NAME$Repository */
	private $$MODEL_NAME_CAMEL$Repository;

	function __construct($MODEL_NAME$Repository $$MODEL_NAME_CAMEL$Repo)
	{
		$this->$MODEL_NAME_CAMEL$Repository = $$MODEL_NAME_CAMEL$Repo;

		$this->middleware('oauth_permission');
		$this->beforeFilter('oauth', ['except'=>['index','show']]);
	}

	/**
	 * Display a listing of the $MODEL_NAME$.
	 *
	 * @param Request $request
	 *
	 * @return Response
	 */
	public function index(Request $request)
	{
	    $input = $request->all();

		$result = $this->$MODEL_NAME_CAMEL$Repository->search($input);

		$$MODEL_NAME_PLURAL_CAMEL$ = $result[0];

		$meta = array(
			'total' => $result['total'],
			'count' => count($$MODEL_NAME_PLURAL_CAMEL$),
			'offset' => isset($input['offset']) ? (int) $input['offset'] : 0,
			'last_updated' => $this->$MODEL_NAME_CAMEL$Repository->lastUpdated(),
			'status' => "$MODEL_NAME_PLURAL$ retrieved successfully.",
			'error' => 'Success'
		 );

		return Response::json(ResponseManager::makeResult($$MODEL_NAME_PLURAL_CAMEL$->toArray(), $meta));
	}

	/**
	 * Show the form for creating a new $MODEL_NAME$.
	 *
	 * @return Response
	 */
	public function create()
	{
		//
	}

	/**
	 * Store a newly created $MODEL_NAME$ in storage.
	 *
	 * @param Request $request
	 *
	 * @return Response
	 */
	public function store(Request $request)
	{
		if(sizeof($MODEL_NAME$::$rules) > 0) {
            $this->validateRequest($request, $MODEL_NAME$::$rules);
    }
        $input = $request->all();

		$$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->create($input);

		$meta = array(
			'total' => 1,
			'count' => 1,
			'offset' => 0,
			'last_updated' => $this->$MODEL_NAME_CAMEL$Repository->lastUpdated(),
			'status' => "$MODEL_NAME$ saved successfully.",
			'error' => 'Success'
		 );

		return Response::json(ResponseManager::makeResult($$MODEL_NAME_CAMEL$->toArray(), $meta), 201);
	}

	/**
	 * Display the specified $MODEL_NAME$.
	 *
	 * @param  int $id
	 *
	 * @return Response
	 */
	public function show($id)
	{
		$$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->find($id);

		if(empty($$MODEL_NAME_CAMEL$)) {
			$this->throwRecordNotFoundException("$MODEL_NAME$ not found", ERROR_CODE_RECORD_NOT_FOUND);
    	}

    	$meta = array(
			'total' => count($$MODEL_NAME_CAMEL$),
			'count' => count($$MODEL_NAME_CAMEL$),
			'offset' => 0,
			'last_updated' => $this->$MODEL_NAME_CAMEL$Repository->lastUpdated(),
			'status' => "$MODEL_NAME$ retrieved successfully.",
			'error' => 'Success'
		 );

		return Response::json(ResponseManager::makeResult($$MODEL_NAME_CAMEL$->toArray(), $meta));
	}

	/**
	 * Show the form for editing the specified $MODEL_NAME$.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function edit($id)
	{
		//
	}

	/**
	 * Update the specified $MODEL_NAME$ in storage.
	 *
	 * @param  int    $id
	 * @param Request $request
	 *
	 * @return Response
	 */
	public function update($id, Request $request)
	{
		$$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->find($id);

		if(empty($$MODEL_NAME_CAMEL$)) {
			$this->throwRecordNotFoundException("$MODEL_NAME$ not found", ERROR_CODE_RECORD_NOT_FOUND);
    	}
    	
		$input = $request->all();

		$meta = array(
			'total' => count($$MODEL_NAME_CAMEL$),
			'count' => count($$MODEL_NAME_CAMEL$),
			'offset' => 0,
			'last_updated' => $this->$MODEL_NAME_CAMEL$Repository->lastUpdated(),
			'status' => "$MODEL_NAME$ updated successfully.",
			'error' => 'Success'
		 );

		$$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->updateRich($input, $id);

		if(!$$MODEL_NAME_CAMEL$)
		{
			$this->throwRecordNotFoundException("$MODEL_NAME$ not saved", ERROR_CODE_VALIDATION_FAILED);
		}

		$$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->find($id);

		return Response::json(ResponseManager::makeResult($$MODEL_NAME_CAMEL$->toArray(), $meta), 201);
	}

	/**
	 * Remove the specified $MODEL_NAME$ from storage.
	 *
	 * @param  int $id
	 *
	 * @return Response
	 */
	public function destroy($id)
	{
		$$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->find($id);

		if(empty($$MODEL_NAME_CAMEL$)) {
			$this->throwRecordNotFoundException("$MODEL_NAME$ not found", ERROR_CODE_RECORD_NOT_FOUND);
   		}

		$$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->delete($id);

		$meta = array(
			'total' => count($$MODEL_NAME_CAMEL$),
			'count' => count($$MODEL_NAME_CAMEL$),
			'offset' => 0,
			'last_updated' => $this->$MODEL_NAME_CAMEL$Repository->lastUpdated(),
			'status' => "$MODEL_NAME$ deleted successfully.",
			'error' => 'Success'
		 );
		
    return Response::json(ResponseManager::makeResult($id, $meta));
	}
}
